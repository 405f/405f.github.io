<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>redis on hello</title>
		<link>https://dtest11.github.io/tags/redis/</link>
		<description>Recent content in redis on dtest11.github.io</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Tue, 02 Jun 2020 21:25:54 +0000</lastBuildDate>
		
		<atom:link href="https://dtest11.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>堆排序</title>
			<link>https://dtest11.github.io/redis/sort-heap/</link>
			<pubDate>Tue, 02 Jun 2020 21:25:54 +0000</pubDate>
			
			<guid>https://dtest11.github.io/redis/sort-heap/</guid>
			<description>
			
				package heap import "fmt" func swap(A []int, i, j int) { A[i], A[j] = A[j], A[i] } //// heapify 最大堆的性质, 建立一个最大堆 //// A[left] <A[i] && A[right] < A[i] //通过下标进行最大值比较过程 func heapify(arr []int, heapSize, i int) { left := 2*i + 1 right := 2*i + 2 largest := i if left < heapSize && arr[left] > arr[largest] { …</A[i]>
			
			</description>
		</item>
		<item>
			<title>redis-skiplist</title>
			<link>https://dtest11.github.io/redis/redis-skiplist/</link>
			<pubDate>Mon, 06 Jan 2020 22:37:02 +0000</pubDate>
			
			<guid>https://dtest11.github.io/redis/redis-skiplist/</guid>
			<description>
			
				AVL 平衡树 定义 左右子树的高度差不超过1
特性 左右子树的值有如下的特性, 因此 AVL 树在查询和排序方面有优越性,时间复杂度是 logn
 left < head <right 一些问题, 由于AVL 为了保持, 上面的特性, 因此AVL 树在Insert , …
			
			</description>
		</item>
		<item>
			<title>redis-分布式锁</title>
			<link>https://dtest11.github.io/redis/redis-lock/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://dtest11.github.io/redis/redis-lock/</guid>
			<description>
			
				一个简单的需求， 高并发的时候用户不能重复注册， 因为后台API， 是多个节点部署的， 我们并不是单台机器，那么怎么保证用户频繁的提交注册请求不会导致业务逻辑重复执行，（这里我们不讨论数据库设计的时候是有唯一的主键的，例如手机号码）其实很简单，我们提供一个中心化的服务，在API执 …
			
			</description>
		</item>
		
	</channel>
</rss>
