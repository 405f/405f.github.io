<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Golangs on hello</title>
		<link>https://dtest11.github.io/golang/</link>
		<description>Recent content in Golangs on dtest11.github.io</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Mon, 01 Mar 2021 14:11:18 +0800</lastBuildDate>
		
		<atom:link href="https://dtest11.github.io/golang/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Golang_build_tool</title>
			<link>https://dtest11.github.io/golang/golang_build_tool/</link>
			<pubDate>Mon, 01 Mar 2021 14:11:18 +0800</pubDate>
			
			<guid>https://dtest11.github.io/golang/golang_build_tool/</guid>
			<description>
			
				Build   compile packages and dependencies 定义
  src/cmd/go/main.go 直接引入work 包 import by 
  这个包暴露了 基本的内置命令
func init() { base.Go.Commands = …
			
			</description>
		</item>
		<item>
			<title>go-1.14-release-note</title>
			<link>https://dtest11.github.io/golang/go-1-14-release-not/</link>
			<pubDate>Fri, 28 Feb 2020 10:42:55 +0000</pubDate>
			
			<guid>https://dtest11.github.io/golang/go-1-14-release-not/</guid>
			<description>
			
				official href 1.14 Release Note
. https://blog.golang.org/go1.14
. https://golang.org/doc/go1.14
重点变更 . Module support in the go command is …
			
			</description>
		</item>
		<item>
			<title>字典的实现</title>
			<link>https://dtest11.github.io/golang/map/</link>
			<pubDate>Tue, 18 Feb 2020 12:10:51 +0000</pubDate>
			
			<guid>https://dtest11.github.io/golang/map/</guid>
			<description>
			
				字典 字典的是具有O(1)的时间复杂度
哈希函数 实现字典通常使用哈系表，哈系表最重要的问题是解决哈系冲突，解决哈系冲突我们最常用的就是2个方法
开放定址法 对与哈系函数 f(x) = index,查找数列中该index 是否已经有存放的元素，如果有元素的话，那么走到下一个位 …
			
			</description>
		</item>
		<item>
			<title>asleep-deadlock!</title>
			<link>https://dtest11.github.io/golang/golang_sleep-deadlock/</link>
			<pubDate>Sun, 09 Feb 2020 12:07:24 +0000</pubDate>
			
			<guid>https://dtest11.github.io/golang/golang_sleep-deadlock/</guid>
			<description>
			
				写goroutines 偶尔会碰到
fatal error: all goroutines are asleep - deadlock! deaklock 的定义 A deadlock happens when a group of goroutines are waiting …
			
			</description>
		</item>
		<item>
			<title>golang defer 的一些总结</title>
			<link>https://dtest11.github.io/golang/defer/</link>
			<pubDate>Sun, 02 Feb 2020 17:05:44 +0000</pubDate>
			
			<guid>https://dtest11.github.io/golang/defer/</guid>
			<description>
			
				defer 和return return 中返回的值 是不受defer 中的逻辑影响的，具体看个例子, return 是先执行的
package main import "fmt" func record() int { var counter = 10 // counter = …
			
			</description>
		</item>
		<item>
			<title>Go中并发控制</title>
			<link>https://dtest11.github.io/golang/golang-concurrency/</link>
			<pubDate>Wed, 15 Jan 2020 13:55:29 +0000</pubDate>
			
			<guid>https://dtest11.github.io/golang/golang-concurrency/</guid>
			<description>
			
				goroutines https://seancarpenter.io/posts/concurrency_in_go/
https://www.cnblogs.com/sunsky303/p/11077634.html
package main import ( "fmt" …
			
			</description>
		</item>
		<item>
			<title>golang-errors</title>
			<link>https://dtest11.github.io/golang/golang-errors/</link>
			<pubDate>Mon, 06 Jan 2020 21:22:07 +0000</pubDate>
			
			<guid>https://dtest11.github.io/golang/golang-errors/</guid>
			<description>
			
				error 只是一个接口的实现 我们之前在定义一个错误的时候只需要 实现如下的一个函数签名, 就可以认为这个结构体是一个error 类型的
type error interface { Error() string } 如这里的T1 就是一个error
type T1 …
			
			</description>
		</item>
		<item>
			<title>gitlab-deploy.md</title>
			<link>https://dtest11.github.io/golang/gitlab-deploy-md/</link>
			<pubDate>Fri, 03 Jan 2020 22:49:16 +0000</pubDate>
			
			<guid>https://dtest11.github.io/golang/gitlab-deploy-md/</guid>
			<description>
			
				gitlab 部署 sudo docker run --detach \ --hostname 47.110.136.181 \ --publish 443:443 --publish 80:80 --publish 23:22 \ --name gitlab \ …
			
			</description>
		</item>
		<item>
			<title>go-Benchmark</title>
			<link>https://dtest11.github.io/golang/go-benchmark/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://dtest11.github.io/golang/go-benchmark/</guid>
			<description>
			
				如何写benchmark 我们有函数如下：
package writeT func Fib(n int) int { if n < 2 { return n } return Fib(n-1) + Fib(n-2) } benchmark 的代码应该是以xxx_test.go 结 …
			
			</description>
		</item>
		<item>
			<title>go-sync-map</title>
			<link>https://dtest11.github.io/golang/golang_sync_map/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://dtest11.github.io/golang/golang_sync_map/</guid>
			<description>
			
				sync map Map is like a Go map[interface{}]interface{} but is safe for concurrent use by multiple goroutines without additional locking or …
			
			</description>
		</item>
		
	</channel>
</rss>
